{
	"info": {
		"_postman_id": "5bb4a48e-4db9-4b24-a68c-461e053fc227",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44666894",
		"_collection_link": "https://abinbaby-5423316.postman.co/workspace/cc79b4d3-8011-4a52-8838-16dbbdf6eabb/collection/44666894-5bb4a48e-4db9-4b24-a68c-461e053fc227?action=share&source=collection_link&creator=44666894"
	},
	"item": [
		{
			"name": "https://jsonplaceholder.typicode.com/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema for the response body - userId, id, title, and body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('userId').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('title').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('body').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title and body should be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(post) {\r",
							"        pm.expect(post.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"        pm.expect(post.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts",
				"description": "### GET /posts\n\nThis endpoint retrieves a list of posts.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response is a JSON array containing post objects with the following schema:\n\n``` json\n[\n  {\n    \"userId\": 0,\n    \"id\": 0,\n    \"title\": \"\",\n    \"body\": \"\"\n  }\n]\n\n ```"
			},
			"response": []
		}
	]
}